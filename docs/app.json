[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# UI definition\nui <- page_fluid(\n  theme = bs_theme(bootswatch = \"flatly\"),\n  title = \"Understanding P-values, Effect Sizes, and Sample Sizes\",\n  \n  card(\n    card_header(\n      h1(\"Statistical Inference Simulator\"),\n      p(\"This app demonstrates the relationship between p-values, effect sizes, and sample sizes.\")\n    ),\n    \n    card_body(\n      p(\"Explore how p-values are distributed under null and alternative hypotheses, and how sample size affects statistical power.\")\n    )\n  ),\n  \n  layout_sidebar(\n    sidebar = sidebar(\n      title = \"Control Panel\",\n      \n      # Simulation settings\n      card(\n        card_header(\"Simulation Parameters\"),\n        \n        radioButtons(\"test_type\", \"Test type\",\n                     choices = c(\"Two-sample t-test\" = \"t_test\",\n                                 \"Correlation test\" = \"cor_test\")),\n        \n        radioButtons(\"hypothesis\", \"Simulate under\",\n                     choices = c(\"Null hypothesis (H₀)\" = \"null\", \n                                 \"Alternative hypothesis (H₁)\" = \"alternative\")),\n        \n        conditionalPanel(\n          condition = \"input.test_type == 't_test' && input.hypothesis == 'alternative'\",\n          sliderInput(\"true_effect\", \"True effect size (Cohen's d)\",\n                      min = 0, max = 2, value = 0.5, step = 0.1)\n        ),\n        \n        conditionalPanel(\n          condition = \"input.test_type == 'cor_test' && input.hypothesis == 'alternative'\",\n         sliderInput(\"true_cor\", \"True correlation (r)\", 0, min = -1, max = 1, value = 0.5, step = 0.1)\n        ),\n        \n        selectInput(\"sample_sizes\", \"Sample sizes to compare\",\n                    choices = list(\n                      \"Small to medium\" = \"small_to_medium\",\n                      \"Medium to large\" = \"medium_to_large\",\n                      \"Custom\" = \"custom\"\n                    )),\n        \n        conditionalPanel(\n          condition = \"input.sample_sizes == 'custom'\",\n          textInput(\"custom_sizes\", \"Enter sample sizes (comma-separated)\", \"10, 30, 50, 100\")\n        ),\n        \n        actionButton(\"run_simulation\", \"Run Simulation\", class = \"btn-primary\")\n      )\n    ),\n    \n    # P-value distribution plot\n    card(\n      card_header(\"P-value Distribution\"),\n      card_body(\n        plotOutput(\"p_value_hist\", height = \"300px\")\n      ),\n      card_footer(\n        \"Under the null hypothesis, p-values should be uniformly distributed between 0 and 1.\"\n      )\n    ),\n    \n    # Effect size distribution plot\n    card(\n      card_header(\"Effect Size Distribution\"),\n      card_body(\n        plotOutput(\"effect_size_hist\", height = \"300px\")\n      ),\n      card_footer(\n        \"This shows the distribution of estimated effect sizes from the simulations.\"\n      )\n    ),\n    \n    # Power analysis plot\n    card(\n      card_header(\"Power Analysis\"),\n      card_body(\n        plotOutput(\"power_plot\", height = \"300px\")\n      ),\n      card_footer(\n        \"Power is the probability of rejecting the null hypothesis when the alternative is true.\"\n      )\n    ),\n    \n    # Summary and insights\n    card(\n      card_header(\"Key Insights\"),\n      card_body(\n        h4(\"What to observe:\"),\n        tags$ul(\n          tags$li(\"P-values under H₀ should be uniformly distributed\"),\n          tags$li(\"Effect sizes under H₀ are larger when the sample size is small - this is called the 'Winner's curse'\"),\n          tags$li(\"P-values under H₁ should cluster toward 0\"),\n          tags$li(\"Larger sample sizes lead to more power (ability to detect effects) under H₁\"),\n          tags$li(\"Larger effect sizes are easier to detect (require smaller samples)\")\n          \n        ),\n        textOutput(\"simulation_summary\")\n      )\n    )\n  )\n)\n\n# Server logic\nserver <- function(input, output, session) {\n  \n  # Helper: parse sample sizes\n  get_sample_sizes <- reactive({\n    if (input$sample_sizes == \"small_to_medium\") {\n      c(10, 30, 50, 100)\n    } else if (input$sample_sizes == \"medium_to_large\") {\n      c(50, 100, 200, 500)\n    } else {\n      sizes <- as.numeric(strsplit(input$custom_sizes, \",\")[[1]])\n      sizes[!is.na(sizes)]\n    }\n  })\n  \n  n_sim <- 1000\n  \n  # Run simulations\n  sim_results <- eventReactive(input$run_simulation, {\n    \n    sizes <- get_sample_sizes()\n    results <- map_dfr(sizes, function(n) {\n      p_vals <- numeric(n_sim)\n      effs <- numeric(n_sim)\n      for (j in seq_len(n_sim)) {\n        if (input$test_type == \"t_test\") {\n          if (input$hypothesis == \"null\") {\n            g1 <- rnorm(n); g2 <- rnorm(n)\n          } else {\n            g1 <- rnorm(n); g2 <- rnorm(n, mean = input$true_effect)\n          }\n          tst <- t.test(g1, g2)\n          p_vals[j] <- tst$p.value\n          sd_pooled <- sqrt(((n-1)*var(g1)+(n-1)*var(g2))/(2*n-2))\n          effs[j] <- (mean(g2)-mean(g1))/sd_pooled\n        } else {\n          if (input$hypothesis == \"null\") {\n            x <- rnorm(n); y <- rnorm(n)\n          } else {\n            x <- rnorm(n)\n            y <- input$true_cor * x + sqrt(1-input$true_cor^2)*rnorm(n)\n          }\n          tst <- cor.test(x, y)\n          p_vals[j] <- tst$p.value\n          effs[j] <- unname(tst$estimate)\n        }\n      }\n      tibble(\n        sample_size = n,\n        p_value = p_vals,\n        effect_size = effs,\n        power = mean(p_vals < 0.05)\n      )\n    })\n    results\n  })\n  \n  # P-value histogram\n  output$p_value_hist <- renderPlot({\n    req(sim_results())\n    df <- sim_results()\n    p <- ggplot(df, aes(x = p_value)) +\n      geom_histogram(bins = 30, fill = \"steelblue\", alpha = 0.6) +\n      facet_wrap(~ sample_size, scales = \"free_y\") +\n      labs(\n        title = paste(\"P-value distribution under\", if (input$hypothesis == \"null\") \"H₀\" else \"H₁\"),\n        x = \"p-value\", y = \"Count\"\n      ) +\n      theme_minimal()+\n      scale_x_continuous(limits = c(-0.05,1))\n\n      p + geom_vline(xintercept = 0.05, linetype = \"dashed\", color = \"red\")\n \n  })\n  \n  # Effect size histogram\n  output$effect_size_hist <- renderPlot({\n    req(sim_results())\n    df <- sim_results()\n    label <- if (input$test_type == \"t_test\") \"Cohen's d\" else \"Correlation (r)\"\n    p1 <- ggplot(df, aes(x = effect_size)) +\n      geom_histogram(bins = 30, fill = \"darkgreen\", alpha = 0.6) +\n      facet_wrap(~ sample_size, scales = \"free_y\") +\n      labs(title = paste(label, \"distribution\"), x = label, y = \"Count\") +\n      theme_minimal()\n  \n    if (input$hypothesis == \"null\") p1 + geom_vline(xintercept = 0, linetype = \"dashed\", color = \"red\") else   p1 + \n      geom_vline(xintercept = if (input$test_type == \"t_test\") input$true_effect else input$true_cor,\n                 linetype = \"dashed\", color = \"red\") \n  })\n  \n  # Power plot\n  output$power_plot <- renderPlot({\n    req(sim_results())\n    power_df <- sim_results() %>% group_by(sample_size) %>% summarise(power = mean(p_value < 0.05))\n    ggplot(power_df, aes(x = sample_size, y = power)) +\n      geom_line(size = 1) +\n      geom_point(size = 3) +\n      geom_hline(yintercept = 0.8, linetype = \"dashed\") +\n      scale_y_continuous(limits = c(0, 1)) +\n      labs(\n        title = \"Power vs. Sample Size\",\n        subtitle = if (input$test_type == \"t_test\") paste0(\"Cohen's d = \", input$true_effect) else paste0(\"r = \", input$true_cor),\n        x = \"Sample Size\", y = \"Power\"\n      ) +\n      theme_minimal()\n  })\n  \n  # Simulation summary text\n  output$simulation_summary <- renderText({\n    req(sim_results())\n    sum_df <- sim_results() %>% group_by(sample_size) %>%\n      summarise(power = mean(p_value < 0.05), .groups = 'drop')\n    lines <- paste0(\"n = \", sum_df$sample_size, \": power = \", sprintf(\"%.2f\", sum_df$power))\n    paste(lines, collapse = \"; \")\n  })\n}\n\n# Launch the app\nshinyApp(ui, server)\n","type":"text"}]
